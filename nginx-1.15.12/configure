#!/bin/sh

# Copyright (C) Igor Sysoev
# Copyright (C) Nginx, Inc.


# 去除所有本地化设置
LC_ALL=C
export LC_ALL

#auto/options脚本处理configure命令的参数。例如，如果参数时--help，那么显示支持所有参数格式。options脚本会定义后续工作将要用到的变量，然后根据本次参数及默认值设置这些变量。
. auto/options
#auto/init脚本初始化后需将产生的文件路径。例如：Makefile ngx_modules.c等文件默认情况下将会在<nginx-source>/objes/
. auto/init
#auto/sources脚本将分析nginx的源码结构，这样才能构造后续的Makefile文件
. auto/sources

#编译过程中所有的目标文件生成的路径由-builddir=DIR参数指定，默认情况下为<nginx-source>/objs，此时这个目录将会被创建
test -d $NGX_OBJS || mkdir -p $NGX_OBJS

#开始准备建立ngx_auth_headers.h 、 autoconf.err等必要的编译文件
echo > $NGX_AUTO_HEADERS_H
echo > $NGX_AUTOCONF_ERR

#向objs/ngx_auto_config.h写入命令行带的参数
echo "#define NGX_CONFIGURE \"$NGX_CONFIGURE\"" > $NGX_AUTO_CONFIG_H

#判断debug标志，若有，那么在objs/ngx_auto_config.h文件中写入DEBUG宏
if [ $NGX_DEBUG = YES ]; then
    have=NGX_DEBUG . auto/have
fi

#现在开始检查操作系统是否支持后续编译
if test -z "$NGX_PLATFORM"; then
    echo "checking for OS"

    NGX_SYSTEM=`uname -s 2>/dev/null`
    NGX_RELEASE=`uname -r 2>/dev/null`
    NGX_MACHINE=`uname -m 2>/dev/null`

    #屏幕上输出OS名称，内核版本，32位/64位内核
    echo " + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE"

    NGX_PLATFORM="$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE";

    case "$NGX_SYSTEM" in
        MINGW32_* | MINGW64_* | MSYS_*)
            NGX_PLATFORM=win32
        ;;
    esac

else
    echo "building for $NGX_PLATFORM"
    NGX_SYSTEM=$NGX_PLATFORM
fi

#检查并设置编译器，如GCC是否安装、GCC版本是否支持后续编译nginx
. auto/cc/conf

#对非windows操作系统定义一些必要的文件，并检查其是否存在，以此决定configure后续步骤是否可以成功
if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/headers
fi

#对于当前操作系统，定义以下特定的操作系统相关的方法并检查当前环境是否支持，例如，对于linux在使用sched_setaffiniy设置进程优先级，使用linux特有的sendfile系统调用来加速向网络中发送文件块
. auto/os/conf

if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/unix
fi

. auto/threads
#最核心的构造运行期modules的脚本。它将会生成ngx_modules.c文件。这个文件会被编译进nginx中，
#其中它所做的唯一的事情就是定义了ngx_modules数组ngx_modules指明了nginx在运行期间有那些模块会参与到请求的处理中，
#包括http请求肯呢个会使用那些模块处理。因此，它对数组元素的顺序非常敏感，也就是说，绝大部分模块在ngx_modules数组中的顺序其实时固定的。
#例如，一个请求必须先执行ngx_http_gzip_filter_module模块重新修改http响应中的头部后，
#才能使用ngx_http_header_filter模块按照headers_in结构体里的成员构造出以TCP流形式发送给客户端的http响应头部。
#注意，我们在--add_module=参数里加入的第三方模块也在此步骤写入ngx_modules.c文件中了
. auto/modules
#conf脚本用来检查nginx在链接期间需要连接的第三方静态库、动态库或者目标文件是否存在
. auto/lib/conf

#处理nginx安装后的路径
case ".$NGX_PREFIX" in
    .)
        NGX_PREFIX=${NGX_PREFIX:-/usr/local/nginx}
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;

    .!)
        NGX_PREFIX=
    ;;

    *)
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;
esac


#处理nginx安装后conf文件的路径
if [ ".$NGX_CONF_PREFIX" != "." ]; then
    have=NGX_CONF_PREFIX value="\"$NGX_CONF_PREFIX/\"" . auto/define
fi

#处理nginx安装后，二进制文件、pid、lock等其他文件的路径可见configure参数中路径类选项的说明
have=NGX_SBIN_PATH value="\"$NGX_SBIN_PATH\"" . auto/define
have=NGX_CONF_PATH value="\"$NGX_CONF_PATH\"" . auto/define
have=NGX_PID_PATH value="\"$NGX_PID_PATH\"" . auto/define
have=NGX_LOCK_PATH value="\"$NGX_LOCK_PATH\"" . auto/define
have=NGX_ERROR_LOG_PATH value="\"$NGX_ERROR_LOG_PATH\"" . auto/define

have=NGX_HTTP_LOG_PATH value="\"$NGX_HTTP_LOG_PATH\"" . auto/define
have=NGX_HTTP_CLIENT_TEMP_PATH value="\"$NGX_HTTP_CLIENT_TEMP_PATH\""
. auto/define
have=NGX_HTTP_PROXY_TEMP_PATH value="\"$NGX_HTTP_PROXY_TEMP_PATH\""
. auto/define
have=NGX_HTTP_FASTCGI_TEMP_PATH value="\"$NGX_HTTP_FASTCGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_UWSGI_TEMP_PATH value="\"$NGX_HTTP_UWSGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_SCGI_TEMP_PATH value="\"$NGX_HTTP_SCGI_TEMP_PATH\""
. auto/define

#创建编译时使用的objs/Makefile文件
. auto/make
#为obj/Makefile接入需要连接的第三方静态库、动态库或者目标文件
. auto/lib/make
#为obj/Makefile加入install功能，当执行make install时将编译生成的必要文件复制到安装路径
. auto/install

# STUB 在ngx_auto_config.h文件中加入NGX_SUPPRESS_WARN宏、NGX_SMP宏
. auto/stubs

#在ngx_auto_config.h文件中指定NGX_USER和NGX_GROUP宏如果执行configure时没有参数指定。默认两者都为NOBODY（也就是默认哟nobody用户运行进程）
have=NGX_USER value="\"$NGX_USER\"" . auto/define
have=NGX_GROUP value="\"$NGX_GROUP\"" . auto/define

if [ ".$NGX_BUILD" != "." ]; then
    have=NGX_BUILD value="\"$NGX_BUILD\"" . auto/define
fi


#显示configure执行的结果，如果失败，则给出原因
. auto/summary
